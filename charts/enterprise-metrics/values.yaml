# The default values specified in this file are enough to deploy all of the
# Grafana Enterprise Metrics microservices but are not suitable for production
# load.
# To configure the resources for production load, refer to the the small.yaml or
# large.yaml values files.

# Container image settings.
# Since the image is unique for all microservices, so are image settings.
image: &image
  repository: grafana/metrics-enterprise
  tag: r176-00920039
  pullPolicy: IfNotPresent
  # Optionally specify an array of imagePullSecrets.
  # Secrets must be manually created in the namespace.
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  # pullSecrets:
  #   - myRegistryKeySecretName

serviceAccount:
  create: true
  name:
  annotations: {}

# -- Configuration is loaded from the secret called 'externalConfigSecretName'. If 'useExternalConfig' is true, then the configuration is not generated, just consumed.
useExternalConfig: &emUseExternalConfig false

# -- Name of the secret that contains the configuration (used for naming even if config is internal).
externalConfigSecretName: &emExternalConfigSecretName 'enterprise-metrics-config'

# -- When 'useExternalConfig' is true, then changing 'externalConfigVersion' triggers restart of services - otherwise changes to the configuration cause a restart.
externalConfigVersion: &emExternalConfigVersion '0'


# In order to use Grafana Enterprise Metrics features, you will need to provide the contents of your Grafana Enterprise Metrics
# license, either by providing the contents of the license.jwt, or the name Kubernetes Secret that contains your license.jwt.
# To set the license contents, use the flag `--set-file 'license.contents=./license.jwt'`
# To use your own Kubernetes Secret, `--set license.external=true`.
license:
  contents: "NOTAVALIDLICENSE"
  external: false
  secretName: &emLicenseSecretName 'enterprise-metrics-license'

# -- Whether to generate pre-2.0 Grafana Enterprise Metrics resource labels and selectors, or generate new Kubernetes standard selectors.
# Rolling upgrade from version 1.7.x without downtime requires this setting to be true. Fresh installation or upgrade with downtime can set
# it to false.
useGEMLabels: &useGEMLabels true

tokengenJob:
  enable: true
  extraArgs: {}
  env: []
  annotations: {}
  initContainers: []

enterpriseMetrics:
  config: |
    multitenancy_enabled: true

    auth:
      type: enterprise

    admin_api:
      leader_election:
        enabled: true
        ring:
          kvstore:
            store: "memberlist"

    {{- if .Values.mimir.minio.enabled }}
    admin_client:
      storage:
        type: s3
        s3:
          endpoint: {{ .Release.Name }}-minio.{{ .Release.Namespace }}.svc:9000
          bucket_name: enterprise-metrics-admin
          access_key_id: {{ .Values.mimir.minio.accessKey }}
          secret_access_key: {{ .Values.mimir.minio.secretKey }}
          insecure: true
    {{- end }}

    {{- if .Values.gateway.useDefaultProxyURLs }}
    gateway:
      proxy:
        default:
          url: http://{{ template "enterprise-metrics.fullname" . }}-admin-api.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}            
        admin_api:
          url: http://{{ template "enterprise-metrics.fullname" . }}-admin-api.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
        alertmanager:
          url: http://{{ template "enterprise-metrics.fullname" . }}-alertmanager.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
        compactor:
          url: http://{{ template "enterprise-metrics.fullname" . }}-compactor.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
        distributor:
          url: http://{{ template "enterprise-metrics.fullname" . }}-distributor.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
        graphite_querier:
          url: http://{{ template "enterprise-metrics.fullname" . }}-graphite.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
        graphite_write_proxy:
          url: http://{{ template "enterprise-metrics.fullname" . }}-graphite.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
        ingester:
          url: http://{{ template "enterprise-metrics.fullname" . }}-ingester.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
        query_frontend:
          url: http://{{ template "enterprise-metrics.fullname" . }}-query-frontend.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
        ruler:
          url: http://{{ template "enterprise-metrics.fullname" . }}-ruler.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
        store_gateway:
          url: http://{{ template "enterprise-metrics.fullname" . }}-store-gateway.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
    {{- end }}

    cluster_name: "{{ .Release.Name }}"

    license:
      path: "/license/license.jwt"

    limits: {}

    alertmanager:
      data_dir: '/data'
      enable_api: true
      external_url: '/alertmanager'

    {{- if .Values.mimir.minio.enabled }}
    alertmanager_storage:
      backend: s3
      s3:
        endpoint: {{ .Release.Name }}-minio.{{ .Release.Namespace }}.svc:9000
        bucket_name: enterprise-metrics-ruler
        access_key_id: {{ .Values.mimir.minio.accessKey }}
        secret_access_key: {{ .Values.mimir.minio.secretKey }}
        insecure: true
    {{- end }}

    frontend_worker:
      frontend_address: {{ template "mimir.fullname" . }}-query-frontend-headless.{{ .Release.Namespace }}.svc:{{ include "mimir.serverGrpcListenPort" . }}

    ruler:
      enable_api: true
      rule_path: '/data'
      alertmanager_url: dnssrvnoa+http://_http-metrics._tcp.{{ template "mimir.fullname" . }}-alertmanager-headless.{{ .Release.Namespace }}.svc.cluster.local/alertmanager

    server:
      grpc_server_max_recv_msg_size: 104857600
      grpc_server_max_send_msg_size: 104857600
      grpc_server_max_concurrent_streams: 1000

    frontend:
      log_queries_longer_than: 10s
      align_queries_with_step: true

    compactor:
      data_dir: "/data"

    ingester:
      ring:
        final_sleep: 0s
        num_tokens: 512
        replication_factor: 1

    ingester_client:
      grpc_client_config:
        max_recv_msg_size: 104857600
        max_send_msg_size: 104857600

    runtime_config:
      file: /var/mimir/runtime.yaml

    memberlist:
      abort_if_cluster_join_fails: false
      bind_port: 7946
      compression_enabled: false
      join_members:
      - {{ include "mimir.fullname" . }}-gossip-ring

    # This configures how the store-gateway synchronizes blocks stored in the bucket. It uses Minio by default for getting started (configured via flags) but this should be changed for production deployments.
    blocks_storage:
      backend: s3
      tsdb:
        dir: /data/tsdb
      bucket_store:
        sync_dir: /data/tsdb-sync
        {{- if .Values.memcached.enabled }}
        chunks_cache:
          backend: memcached
          memcached:
            addresses: dns+{{ .Release.Name }}-memcached.{{ .Release.Namespace }}.svc:11211
            max_item_size: {{ .Values.memcached.maxItemMemory }}
        {{- end }}
        {{- if index .Values "memcached-metadata" "enabled" }}
        metadata_cache:
          backend: memcached
          memcached:
            addresses: dns+{{ .Release.Name }}-memcached-metadata.{{ .Release.Namespace }}.svc:11211
            max_item_size: {{ (index .Values "memcached-metadata").maxItemMemory }}
        {{- end }}
        {{- if index .Values "memcached-queries" "enabled" }}
        index_cache:
          backend: memcached
          memcached:
            addresses: dns+{{ .Release.Name }}-memcached-queries.{{ .Release.Namespace }}.svc:11211
            max_item_size: {{ (index .Values "memcached-queries").maxItemMemory }}
        {{- end }}
      {{- if .Values.mimir.minio.enabled }}
      s3:
        endpoint: {{ .Release.Name }}-minio.{{ .Release.Namespace }}.svc:9000
        bucket_name: enterprise-metrics-tsdb
        access_key_id: {{ .Values.mimir.minio.accessKey }}
        secret_access_key: {{ .Values.mimir.minio.secretKey }}
        insecure: true
      {{- end }}

    {{- if .Values.mimir.minio.enabled }}
    ruler_storage:
      backend: s3
      s3:
        endpoint: {{ .Release.Name }}-minio.{{ .Release.Namespace }}.svc:9000
        bucket_name: enterprise-metrics-ruler
        access_key_id: {{ .Values.mimir.minio.accessKey }}
        secret_access_key: {{ .Values.mimir.minio.secretKey }}
        insecure: true
    {{- end }}

    instrumentation:
      enabled: true
      distributor_client:
        address: 'dns:///{{ template "mimir.fullname" . }}-distributor.{{ .Release.Namespace }}.svc:{{ include "mimir.serverGrpcListenPort" . }}'

# runtimeConfig provides a reloadable runtime configuration file for some specific configuration.
runtimeConfig: {}

rbac:
  create: true
  pspEnabled: true

admin_api:
  replicas: 1

  annotations: {}
  service:
    annotations: {}
    labels: {}

  initContainers: []

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  podLabels: {}
  podAnnotations: {}

  securityContext: {}

  extraArgs: {}

  persistence:
    subPath:

  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  resources:
    requests:
      cpu: 10m
      memory: 32Mi

  extraContainers: []
  extraVolumes: []
  nodeSelector: {}
  affinity: {}
  tolerations: []
  terminationGracePeriodSeconds: 60

gateway:
  # If you want to use your own proxy URLs, set this to false.
  useDefaultProxyURLs: true
  replicas: 1

  annotations: {}
  service:
    annotations: {}
    labels: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  podLabels: {}
  podAnnotations: {}

  securityContext: {}
  initContainers: []

  extraArgs: {}

  persistence:
    subPath:

  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  resources:
    requests:
      cpu: 10m
      memory: 32Mi

  extraContainers: []
  extraVolumes: []
  nodeSelector: {}
  affinity: {}
  tolerations: []
  terminationGracePeriodSeconds: 60

memcached:
  enabled: false
  architecture: high-availability
  arguments:
    - -m 8192
    - -o
    - modern
    - -v
    - -I 1m
    - -c 4096
  image:
    repository: memcached
    tag: 1.6.9
  # maxItemMemory is in bytes. Should match memcached -I flag (which is in MB)
  # It is a string to avoid https://github.com/helm/helm/issues/1707.
  maxItemMemory: '1048576'  # (* 1 (* 1024 1024))
  metrics:
    enabled: true
    image:
      registry: quay.io
      repository: prometheus/memcached-exporter
      tag: v0.9.0
  replicaCount: 1
  resources:
    limits:
      # memory limits should match requests
      memory: 9830Mi
    requests:
      cpu: 500m
      # memory requests should be exceed memcached -m flag
      memory: 9830Mi  # (floor (* 1.2 8192))

memcached-queries:
  enabled: false
  architecture: high-availability
  arguments:
    - -m 2048
    - -o
    - modern
    - -v
    - -I 15m
    - -c 1024
  image:
    repository: memcached
    tag: 1.6.9
  # maxItemMemory is in bytes. Should match memcached -I flag (which is in MB)
  # It is a string to avoid https://github.com/helm/helm/issues/1707.
  maxItemMemory: '15728640'  # (* 15 (* 1024 1024))
  metrics:
    enabled: true
    image:
      registry: quay.io
      repository: prometheus/memcached-exporter
      tag: v0.9.0
  replicaCount: 1
  resources:
    limits:
      # memory limits should match requests
      memory: 2457Mi
    requests:
      cpu: 500m
      # memory requests should be exceed memcached -m flag
      memory: 2457Mi  # (floor (* 1.2 2048))

memcached-metadata:
  enabled: false
  architecture: high-availability
  arguments:
    - -m 512
    - -o
    - modern
    - -v
    - -I 1m
    - -c 1024
  image:
    repository: memcached
    tag: 1.6.9
  # maxItemMemory is in bytes. Should match memcached -I flag (which is in MB)
  # It is a string to avoid https://github.com/helm/helm/issues/1707.
  maxItemMemory: '1048576'  # (* 1 (* 1024 1024))
  metrics:
    enabled: true
    image:
      registry: quay.io
      repository: prometheus/memcached-exporter
      tag: v0.9.0
  replicaCount: 1
  resources:
    limits:
      # memory limits should match requests
      memory: 614Mi
    requests:
      cpu: 500m
      # memory requests should be exceed memcached -m flag
      memory: 614Mi  # (floor (* 1.2 512))

mimir:
  minio:
    enabled: true
    accessKey: enterprise-metrics
    buckets:
      - name: enterprise-metrics-tsdb
        policy: none
        purge: false
      - name: enterprise-metrics-admin
        policy: none
        purge: false
      - name: enterprise-metrics-ruler
        policy: none
        purge: false
    persistence:
      size: 5Gi
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
    secretKey: supersecret

  gateway:
    # using the parent enterprise gateway instead
    enabled: false

  alertmanager:
    extraVolumes:
      # -- Create license volume from license secret
      - name: license
        secret:
          secretName: *emLicenseSecretName
    extraVolumeMounts:
      # -- Mount the license volume
      - name: license
        mountPath: /license

  distributor:
    extraVolumes:
      # -- Create license volume from license secret
      - name: license
        secret:
          secretName: *emLicenseSecretName
    extraVolumeMounts:
      # -- Mount the license volume
      - name: license
        mountPath: /license

  ingester:
    extraVolumes:
      # -- Create license volume from license secret
      - name: license
        secret:
          secretName: *emLicenseSecretName
    extraVolumeMounts:
      # -- Mount the license volume
      - name: license
        mountPath: /license

  overrides_exporter:
    extraVolumes:
      # -- Create license volume from license secret
      - name: license
        secret:
          secretName: *emLicenseSecretName
    extraVolumeMounts:
      # -- Mount the license volume
      - name: license
        mountPath: /license

  ruler:
    extraVolumes:
      # -- Create license volume from license secret
      - name: license
        secret:
          secretName: *emLicenseSecretName
    extraVolumeMounts:
      # -- Mount the license volume
      - name: license
        mountPath: /license

  querier:
    extraVolumes:
      # -- Create license volume from license secret
      - name: license
        secret:
          secretName: *emLicenseSecretName
    extraVolumeMounts:
      # -- Mount the license volume
      - name: license
        mountPath: /license

  query_frontend:
    extraVolumes:
      # -- Create license volume from license secret
      - name: license
        secret:
          secretName: *emLicenseSecretName
    extraVolumeMounts:
      # -- Mount the license volume
      - name: license
        mountPath: /license

  store_gateway:
    extraVolumes:
      # -- Create license volume from license secret
      - name: license
        secret:
          secretName: *emLicenseSecretName
    extraVolumeMounts:
      # -- Mount the license volume
      - name: license
        mountPath: /license

  compactor:
    extraVolumes:
      # -- Create license volume from license secret
      - name: license
        secret:
          secretName: *emLicenseSecretName
    extraVolumeMounts:
      # -- Mount the license volume
      - name: license
        mountPath: /license

  # Overrides on Mimir subchart
  config: null
  nameOverride: enterprise-metrics
  useGEMLabels: *useGEMLabels
  useExternalConfig: *emUseExternalConfig
  externalConfigSecretName: *emExternalConfigSecretName
  externalConfigVersion: *emExternalConfigVersion
  # Stop the mimir chart from also generating the config secret
  skipConfigSecret: true
  image: *image
